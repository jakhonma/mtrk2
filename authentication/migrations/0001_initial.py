# Generated by Django 5.0.7 on 2024-12-24 05:01

import authentication.managers
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('full_name', models.CharField(blank=True, max_length=200, verbose_name='first name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(blank=True, choices=[('ADMIN', 'ADMIN'), ('LEADER', 'LEADER'), ('EMPLOYEE', 'EMPLOYEE'), ('LOW_USER', 'LOW_USER')], default='LOW_USER', max_length=10)),
                ('groups', models.ForeignKey(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', authentication.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
            ],
            options={
                'verbose_name': 'admin',
                'verbose_name_plural': 'admins',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', authentication.managers.AdminManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeUser',
            fields=[
            ],
            options={
                'verbose_name': 'employee',
                'verbose_name_plural': 'employees',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', authentication.managers.EmployeeManager()),
            ],
        ),
        migrations.CreateModel(
            name='LeaderUser',
            fields=[
            ],
            options={
                'verbose_name': 'leader',
                'verbose_name_plural': 'leaders',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', authentication.managers.LeaderManager()),
            ],
        ),
        migrations.CreateModel(
            name='LowUser',
            fields=[
            ],
            options={
                'verbose_name': 'low user',
                'verbose_name_plural': 'low user',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', authentication.managers.LowUserManager()),
            ],
        ),
    ]
